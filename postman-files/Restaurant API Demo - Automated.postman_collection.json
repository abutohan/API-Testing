{
	"info": {
		"_postman_id": "8f6be2fe-5f35-4bc7-9656-494b68fd8f74",
		"name": "Restaurant API Demo - Automated",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15889656",
		"_collection_link": "https://abi-api-testing.postman.co/workspace/Udemy-Postman-Training~12a31c08-88f9-4ff0-a333-6d6ca22cc63e/collection/15889656-8f6be2fe-5f35-4bc7-9656-494b68fd8f74?action=share&source=collection_link&creator=15889656"
	},
	"item": [
		{
			"name": "Status API",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains welcome message\", function () {\r",
									"    pm.expect(response.message).to.eql(\"Welcome to Restaurant API.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/status",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Menu API",
			"item": [
				{
					"name": "Menu API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains Appetizers, Drinks and Main Courses\", function () {\r",
									"    pm.expect(response.hasOwnProperty(\"appetizers\")).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty(\"drinks\")).to.be.true;\r",
									"    pm.expect(response.hasOwnProperty(\"main-courses\")).to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/menus",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"menus"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Appetizer API",
			"item": [
				{
					"name": "Appetizers - Get All",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/appetizers",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"appetizers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Appetizers - Get Single",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/appetizers/1",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"appetizers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Appetizers - Update",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"appetizer_name\": \"Adobo\",\r\n    \"appetizer_description\": \"Di masarap\",\r\n    \"appetizer_image\": \"\",\r\n    \"appetizer_price\": 50.0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/appetizers/0",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"appetizers",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Appetizers - Delete",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/appetizers/1",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"appetizers",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Drinks API",
			"item": [
				{
					"name": "Drinks - Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Schema is valid\", function() {",
									"    const schema = {",
									"        \"type\" : \"array\",",
									"        \"items\" : {",
									"            \"type\" : \"object\",",
									"            \"properties\" : {",
									"                \"id\": {\"type\" : \"number\"},",
									"                \"name\":  {\"type\" : \"string\"},",
									"                \"description\":  {\"type\" : \"string\"},",
									"                \"image\":  {\"type\" : \"string\"},",
									"                \"price\":  {\"type\" : \"number\"},",
									"            },",
									"            \"required\" : [\"id\", \"name\", \"description\", \"image\", \"price\"],",
									"            \"additionalProperties\": false",
									"        }",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 201', function () {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    const schema = {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"id\": {\"type\" : \"number\"},\r",
									"                \"name\":  {\"type\" : \"string\"},\r",
									"                \"description\":  {\"type\" : \"string\"},\r",
									"                \"image\":  {\"type\" : \"string\"},\r",
									"                \"price\":  {\"type\" : \"number\"},\r",
									"            },\r",
									"            \"required\" : [\"id\", \"name\", \"description\", \"image\", \"price\"],\r",
									"            \"additionalProperties\": false\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Successfully created the data\", function () {\r",
									"    pm.expect(response.name).is.eql(`${pm.iterationData.get(\"drink_name\")}`);\r",
									"    pm.expect(response.description).is.eql(`${pm.iterationData.get(\"drink_description\")}`);\r",
									"    pm.expect(response.image).is.eql(`${pm.iterationData.get(\"drink_image\")}`);\r",
									"    pm.expect(response.price).is.eql(pm.iterationData.get(\"drink_price\"));\r",
									"    \r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"drink_id\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{drink_name}}\",\r\n    \"description\": \"{{drink_description}}\",\r\n    \"image\": \"{{drink_image}}\",\r\n    \"price\": {{drink_price}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/drinks",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Get Single",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Schema is valid\", function() {",
									"    const schema = {",
									"            \"type\" : \"object\",",
									"            \"properties\" : {",
									"                \"id\": {\"type\" : \"number\"},",
									"                \"name\":  {\"type\" : \"string\"},",
									"                \"description\":  {\"type\" : \"string\"},",
									"                \"image\":  {\"type\" : \"string\"},",
									"                \"price\":  {\"type\" : \"number\"},",
									"            },",
									"            \"required\" : [\"id\", \"name\", \"description\", \"image\", \"price\"],",
									"            \"additionalProperties\": false",
									"    };",
									"",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Response contains the correct data\", function () {",
									"    pm.expect(response.name).is.eql(`${pm.iterationData.get(\"drink_name\")}`);",
									"    pm.expect(response.description).is.eql(`${pm.iterationData.get(\"drink_description\")}`);",
									"    pm.expect(response.image).is.eql(`${pm.iterationData.get(\"drink_image\")}`);",
									"    pm.expect(response.price).is.eql(pm.iterationData.get(\"drink_price\"));",
									"    ",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Get Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.expect(response.message).to.eql(`No Drink found with id ${pm.iterationData.get(\"drink_id_invalid\")}`)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id_invalid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks- Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    const schema = {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"id\": {\"type\" : \"number\"},\r",
									"                \"name\":  {\"type\" : \"string\"},\r",
									"                \"description\":  {\"type\" : \"string\"},\r",
									"                \"image\":  {\"type\" : \"string\"},\r",
									"                \"price\":  {\"type\" : \"number\"},\r",
									"            },\r",
									"            \"required\" : [\"id\", \"name\", \"description\", \"image\", \"price\"],\r",
									"            \"additionalProperties\": false\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Response contains updated data\", function () {\r",
									"    pm.expect(response.name).is.eql(`${pm.iterationData.get(\"drink_updated_name\")}`);\r",
									"    pm.expect(response.description).is.eql(`${pm.iterationData.get(\"drink_updated_description\")}`);\r",
									"    pm.expect(response.image).is.eql(`${pm.iterationData.get(\"drink_updated_image\")}`);\r",
									"    pm.expect(response.price).is.eql(pm.iterationData.get(\"drink_updated_price\"));\r",
									"    \r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{drink_updated_name}}\",\r\n    \"description\": \"{{drink_updated_description}}\",\r\n    \"image\": \"{{drink_updated_image}}\",\r\n    \"price\": {{drink_updated_price}}\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks- Update Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 404', function () {\r",
									"    pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Response contains error message\", function () {\r",
									"    pm.expect(response.message).to.eql(`No Drink found with id ${pm.iterationData.get(\"drink_id_invalid\")}.`);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{drink_updated_name}}\",\r\n    \"description\": \"{{drink_updated_description}}\",\r\n    \"image\": \"{{drink_updated_image}}\",\r\n    \"price\": {{drink_updated_price}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id_invalid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks- Get Updated ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"pm.test('Content-Type is application/json', function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"})\r",
									"\r",
									"pm.test(\"Schema is valid\", function() {\r",
									"    const schema = {\r",
									"            \"type\" : \"object\",\r",
									"            \"properties\" : {\r",
									"                \"id\": {\"type\" : \"number\"},\r",
									"                \"name\":  {\"type\" : \"string\"},\r",
									"                \"description\":  {\"type\" : \"string\"},\r",
									"                \"image\":  {\"type\" : \"string\"},\r",
									"                \"price\":  {\"type\" : \"number\"},\r",
									"            },\r",
									"            \"required\" : [\"id\", \"name\", \"description\", \"image\", \"price\"],\r",
									"            \"additionalProperties\": false\r",
									"    };\r",
									"\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"})\r",
									"\r",
									"pm.test(\"Response contains the updated data\", function () {\r",
									"    pm.expect(response.name).is.eql(`${pm.iterationData.get(\"drink_updated_name\")}`);\r",
									"    pm.expect(response.description).is.eql(`${pm.iterationData.get(\"drink_updated_description\")}`);\r",
									"    pm.expect(response.image).is.eql(`${pm.iterationData.get(\"drink_updated_image\")}`);\r",
									"    pm.expect(response.price).is.eql(pm.iterationData.get(\"drink_updated_price\"));\r",
									"    \r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Successfully deleted the data\", function () {",
									"    pm.expect(response.message).to.eql(`Drink with id ${pm.collectionVariables.get(\"drink_id\")} deleted`)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Delete Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"     pm.expect(response.message).to.eql(`No Drink found with id ${pm.iterationData.get(\"drink_id_invalid\")}.`)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id_invalid}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id_invalid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drinks - Get Deleted ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"pm.test('Status code is 404', function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test('Content-Type is application/json', function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"})",
									"",
									"pm.test(\"Response contains error message\", function () {",
									"    pm.expect(response.message).to.eql(`No Drink found with id ${pm.collectionVariables.get(\"drink_id\")}`)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/restaurant/api/v1/drinks/{{drink_id}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"restaurant",
								"api",
								"v1",
								"drinks",
								"{{drink_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Main Course",
			"item": [
				{
					"name": "Main Courses - Get All",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/main-courses",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"main-courses"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Preparation",
			"item": [
				{
					"name": "Appetizers - Data Preparation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"appetizer_id\": {{appetizer_id}},\r\n    \"appetizer_name\": \"{{appetizer_name}}\",\r\n    \"appetizer_description\": \"{{appetizer_description}}\",\r\n    \"appetizer_img\": \"{{appetizer_img}}\",\r\n    \"appetizer_price\": {{appetizer_price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/appetizers",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"appetizers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Main Courses - Data Preparation",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    // \"main_course_id\": {{main_course_id}},\r\n    \"main_course_name\": \"{{main_course_name}}\",\r\n    \"main_course_description\": \"{{main_course_description}}\",\r\n    \"main_course_img\": \"{{main_course_img}}\",\r\n    \"main_course_price\": {{main_course_price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "192.168.100.10:8080/restaurant/api/v1/main-courses",
							"host": [
								"192",
								"168",
								"100",
								"10"
							],
							"port": "8080",
							"path": [
								"restaurant",
								"api",
								"v1",
								"main-courses"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Load data from file",
							"if (typeof pm.variables.get('requestsData') !== 'object') {",
							"    pm.variables.set('requestsData', pm.iterationData.toObject());",
							"}",
							"const requestsData = pm.variables.get('requestsData');",
							"",
							"if (typeof requestsData !== 'object' || Object.keys(requestsData).length === 0) {",
							"    console.log('No external data provided or object is empty.');",
							"    return;",
							"}",
							"",
							"// Find the current request",
							"const currentRequest = requestsData.requests.filter(({name}) => name === pm.info.requestName)[0];",
							"",
							"// Skip the rest since we have no data",
							"if (!currentRequest) {",
							"    console.log(`Request ${pm.info.requestName} has no data defined.`);",
							"    return;",
							"}",
							"",
							"// Expose variables",
							"const variables = currentRequest.data.shift();",
							"",
							"for (const [key,value] of Object.entries(variables)) {",
							"    pm.variables.set(key, value);",
							"}",
							"",
							"pm.variables.set('requestsData', requestsData);",
							"",
							"// Decide where to go next",
							"if (currentRequest.data.length > 0) {",
							"    postman.setNextRequest(pm.info.requestName);",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "drink_id",
			"value": ""
		}
	]
}